Description: Example Server
Mappings:
  AMIMap:
    cn-northwest-1:
      AMI: ami-09478b31d8343756c
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required parameters.
        Parameters:
          - DBPassword
          - KeyPair
      - Label:
          default: 'Advanced: Database and instance'
        Parameters:
          - DBInstanceType
          - DBStorageSize
          - DBBackupRetention
          - EC2InstanceType
    ParameterLabels:
      DBBackupRetention:
        default: How long to keep backups (advanced)
      DBInstanceType:
        default: Database instance class (advanced)
      DBPassword:
        default: Choose a database password
      DBStorageSize:
        default: Database storage (advanced)
      EC2InstanceType:
        default: Instance class (advanced)
      KeyPair:
        default: Choose a key pair
Resources:
  AppInstanceSecurityGroup:
    Properties:
      GroupDescription: App Instance security group
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '-1'
          IpProtocol: '-1'
          ToPort: '-1'
      SecurityGroupIngress:
        - FromPort: '80'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'WebInstanceSecurityGroup'
          ToPort: '81'
        - FromPort: '5366'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'WebInstanceSecurityGroup'
          ToPort: '5367'
        - FromPort: '3389'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'WebInstanceSecurityGroup'
          ToPort: '3389'
        - FromPort: '-1'
          IpProtocol: ICMP
          SourceSecurityGroupId: !Ref 'WebInstanceSecurityGroup'
          ToPort: '-1'
        - FromPort: '-1'
          IpProtocol: '-1'
          SourceSecurityGroupId: !Ref 'WebInstanceSecurityGroup'
          ToPort: '-1'
        - FromPort: '-1'
          IpProtocol: '-1'
          SourceSecurityGroupId: !Ref 'OpsSecurityGroup'
          ToPort: '-1'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - ' App  instance security group'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -internet-gateway
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  Nat:
    DependsOn: NatEip
    Properties:
      AllocationId: !GetAtt 'NatEip.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::NatGateway
  NatEip:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NatRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'Nat'
      RouteTableId: !Ref 'PrivateRouteTable'
    Type: AWS::EC2::Route
  OpsSecurityGroup:
    Properties:
      GroupDescription: Ops security group
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 0
          IpProtocol: '-1'
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 3389
          IpProtocol: tcp
          ToPort: 3389
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - ' ops security group'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  PrivateNetworkACL:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -private-nacl
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  PrivateNetworkAclEntryIn:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      NetworkAclId: !Ref 'PrivateNetworkACL'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200
    Type: AWS::EC2::NetworkAclEntry
  PrivateNetworkAclEntryOut:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      NetworkAclId: !Ref 'PrivateNetworkACL'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200
    Type: AWS::EC2::NetworkAclEntry
  PrivateRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-route-table
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 172.192.1.0/24
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -private-subnet-1
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet1NetworkAclAssociation:
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkACL'
      SubnetId: !Ref 'PrivateSubnet1'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PrivateSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 172.192.2.0/24
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -private-subnet-2
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet2NetworkAclAssociation:
    Properties:
      NetworkAclId: !Ref 'PrivateNetworkACL'
      SubnetId: !Ref 'PrivateSubnet2'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PrivateSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-route-table
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 172.192.128.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -public-subnet-1
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 172.192.129.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -public-subnet-2
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  RouteToInternet:
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  VPC:
    Properties:
      CidrBlock: 172.192.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Type: AWS::EC2::VPC
  VPCS3Endpoint:
    Properties:
      RouteTableIds:
        - !Ref 'PublicRouteTable'
        - !Ref 'PrivateRouteTable'
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCEndpoint
  WebInstanceSecurityGroup:
    Properties:
      GroupDescription: Web Instance security group
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '-1'
          IpProtocol: '-1'
          ToPort: '-1'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '81'
        - CidrIp: '0.0.0.0/0'
          FromPort: '5366'
          IpProtocol: tcp
          ToPort: '5367'
        - CidrIp: '0.0.0.0/0'
          FromPort: '3389'
          IpProtocol: tcp
          ToPort: '3389'
        - CidrIp: '0.0.0.0/0'
          FromPort: '-1'
          IpProtocol: ICMP
          ToPort: '-1'
        - FromPort: '-1'
          IpProtocol: '-1'
          SourceSecurityGroupId: !Ref 'OpsSecurityGroup'
          ToPort: '-1'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - ' web instance security group'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  appInstanceSecurityGroupIngressRule:
    DependsOn: AppInstanceSecurityGroup
    Properties:
      FromPort: '-1'
      GroupId: !Ref 'AppInstanceSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'AppInstanceSecurityGroup'
      ToPort: '-1'
    Type: AWS::EC2::SecurityGroupIngress
  dBSecurityGroup:
    Properties:
      GroupDescription: DB security group
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '-1'
          IpProtocol: '-1'
          ToPort: '-1'
      SecurityGroupIngress:
        - FromPort: '1433'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'AppInstanceSecurityGroup'
          ToPort: '1433'
        - FromPort: '80'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'AppInstanceSecurityGroup'
          ToPort: '81'
        - FromPort: '5366'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'AppInstanceSecurityGroup'
          ToPort: '5367'
        - FromPort: '3389'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'AppInstanceSecurityGroup'
          ToPort: '3389'
        - FromPort: '-1'
          IpProtocol: ICMP
          SourceSecurityGroupId: !Ref 'AppInstanceSecurityGroup'
          ToPort: '-1'
        - FromPort: '-1'
          IpProtocol: '-1'
          SourceSecurityGroupId: !Ref 'OpsSecurityGroup'
          ToPort: '-1'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - ' App DB security group'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  dbGroupIngressRule:
    DependsOn: dBSecurityGroup
    Properties:
      FromPort: '-1'
      GroupId: !Ref 'dBSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'dBSecurityGroup'
      ToPort: '-1'
    Type: AWS::EC2::SecurityGroupIngress
  webInstanceSecurityGroupIngressRule:
    DependsOn: WebInstanceSecurityGroup
    Properties:
      FromPort: '-1'
      GroupId: !Ref 'WebInstanceSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'WebInstanceSecurityGroup'
      ToPort: '-1'
    Type: AWS::EC2::SecurityGroupIngress

